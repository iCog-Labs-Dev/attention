// WARentCollectionAgentUTest.cpp

#include <cxxtest/TestSuite.h>
#include <chrono>
#include <thread>
#include <algorithm>
#include <iostream>

#include <opencog/cogserver/server/CogServer.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/cogserver/modules/agents/AgentsModule.h>
#include <opencog/cogserver/modules/agents/Scheduler.h>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/attention/WARentCollectionAgent.h>
#include <opencog/attentionbank/bank/StochasticImportanceDiffusion.h>
#include <opencog/util/Config.h>



using namespace opencog;
using namespace std;
using namespace std::chrono;

class WARentCollectionAgentUTest : public CxxTest::TestSuite {
private:
    AtomSpace* as;
    WARentCollectionAgent* _wagent;
    CogServer* _cogserver;
    Scheduler* _scheduler;

public:
    void setUp() {
        // Initialize the CogServer
        _cogserver = &cogserver();
        config().set("MODULES", "opencog/attention/libattention.so");
        _cogserver->loadModules();
        config().set("MODULES", "libagents.so");

        // Load the AgentsModule
        Module* amod = _cogserver->getModule("opencog::AgentsModule");
        AgentsModule* agmod = static_cast<AgentsModule*>(amod);
        _scheduler = &agmod->get_scheduler();

        // Get the AtomSpace
        as = &_cogserver->getAtomSpace();

        // Initialize the WARentCollectionAgent
        _wagent = new WARentCollectionAgent(*_cogserver);

        // Register the WARentCollectionAgent with the scheduler
        AbstractFactory<Agent>* warentFactory = new Factory<WARentCollectionAgent, Agent>;
        _scheduler->registerAgent(WARentCollectionAgent::info().id, warentFactory);

        std::cout << "WARentCollectionAgent registered" << std::endl;
    }

    void tearDown() {
        delete _wagent;
        _cogserver->stop();
        std::cout << "TearDown completed for WARentCollectionAgentUTest." << std::endl;
    }
void testCollectRent() {
    // Create atoms for rent collection testing
    Handle a = as->add_node(CONCEPT_NODE, "RentNode1");
    Handle b = as->add_node(CONCEPT_NODE, "RentNode2");
    Handle c = as->add_node(CONCEPT_NODE, "RentNode3");

    AttentionBank& ab = attentionbank(as);
   ab.set_sti(a, 50000);
    ab.set_sti(b, 20000);
    ab.set_sti(c, 29000);
    ab.set_lti(a, 50000);
    ab.set_lti(b, 20000);
    ab.set_lti(c, 29000);

    // Reference StochasticDiffusionAmountCalculator with the correct namespace
    opencog::ecan::StochasticDiffusionAmountCalculator& sdac = _wagent->_sdac;
    HandleSeq targetSet = {a};
    // Initialize diffusion bins for test atoms
    sdac.update_bin(a);
     sdac.update_bin(a);
    //sdac.update_bin(b);
    //sdac.update_bin(c);

    // Wait briefly so that elapsed time is nonzero
    std::this_thread::sleep_for(std::chrono::milliseconds(500));

    double initial_sti = get_sti(a);
    double initial_lti = get_lti(a);

    // Call collectRent to deduct rent from the atom
  
    _wagent->collectRent(targetSet);

    double final_sti = get_sti(a);
    double final_lti = get_lti(a);

    // Verify that the rent has been collected (the values are decreased)
    TS_ASSERT_LESS_THAN(final_sti, initial_sti);
    TS_ASSERT_LESS_THAN(final_lti, initial_lti);

    std::cout << "testCollectRent passed" << std::endl;
}
    
};
