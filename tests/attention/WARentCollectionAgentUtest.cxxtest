// WARentCollectionAgentUTest.cpp

#include <cxxtest/TestSuite.h>
#include <chrono>
#include <thread>
#include <algorithm>
#include <iostream>

#include <opencog/cogserver/server/CogServer.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/cogserver/modules/agents/AgentsModule.h>
#include <opencog/cogserver/modules/agents/Scheduler.h>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/attention/WARentCollectionAgent.h>
#include <opencog/attentionbank/bank/StochasticImportanceDiffusion.h>
#include <opencog/util/Config.h>



using namespace opencog;
using namespace std;
using namespace std::chrono;

class WARentCollectionAgentUTest : public CxxTest::TestSuite {
private:
    AtomSpace* as;
    WARentCollectionAgent* _wagent;
    CogServer* _cogserver;
    Scheduler* _scheduler;

public:
    void setUp() {
        // Initialize the CogServer
        _cogserver = &cogserver();
        config().set("MODULES", "opencog/attention/libattention.so");
        _cogserver->loadModules();
        config().set("MODULES", "libagents.so");

        // Load the AgentsModule
        Module* amod = _cogserver->getModule("opencog::AgentsModule");
        AgentsModule* agmod = static_cast<AgentsModule*>(amod);
        _scheduler = &agmod->get_scheduler();

        // Get the AtomSpace
        as = &_cogserver->getAtomSpace();

        // Initialize the WARentCollectionAgent
        _wagent = new WARentCollectionAgent(*_cogserver);

        // Register the WARentCollectionAgent with the scheduler
        AbstractFactory<Agent>* warentFactory = new Factory<WARentCollectionAgent, Agent>;
        _scheduler->registerAgent(WARentCollectionAgent::info().id, warentFactory);

        std::cout << "WARentCollectionAgent registered" << std::endl;
    }

    void tearDown() {
        delete _wagent;
        _cogserver->stop();
        std::cout << "TearDown completed for WARentCollectionAgentUTest." << std::endl;
    }


void testCollectRent() {
    // Create atoms for rent collection testing
    Handle a = as->add_node(CONCEPT_NODE, "RentNode1");
    Handle b = as->add_node(CONCEPT_NODE, "RentNode2");
    Handle c = as->add_node(CONCEPT_NODE, "RentNode3");
    Handle d = as->add_node(CONCEPT_NODE, "RentNode4");
    
    Handle e = as->add_node(CONCEPT_NODE, "RentNode5");
    Handle f = as->add_node(CONCEPT_NODE, "RentNode6");
    Handle h = as->add_node(CONCEPT_NODE, "RentNode7");
    Handle i = as->add_node(CONCEPT_NODE, "RentNode8");
    Handle j = as->add_node(CONCEPT_NODE, "RentNode9");
    Handle k = as->add_node(CONCEPT_NODE, "RentNode10");

    Handle g = as->add_node(CONCEPT_NODE, "RentNode11");
 
    AttentionBank& ab = attentionbank(as);
    ab.stimulate(a, 3000.0);
    ab.stimulate(b, 1500.0);
    ab.stimulate(c, 290.0);
    ab.stimulate(d, 50.0);
    
    // ab.stimulate(e, 5.0);
    ab.stimulate(f, 0.5);
    ab.stimulate(i, 0.4);
    ab.stimulate(j, 0.4);
    ab.stimulate(k, 0.5);

    // ab.stimulate(g, 0.05);

    TS_ASSERT_EQUALS(get_sti(a), 60000.0); 
    TS_ASSERT_EQUALS(get_sti(b), 30000.0);
    TS_ASSERT_EQUALS(get_sti(c), 2900.0);
    TS_ASSERT_EQUALS(get_sti(d), 355.0);
    // TS_ASSERT_EQUALS(get_sti(e), 33.7250);
    TS_ASSERT_DELTA( get_sti(f), 3.3725, 1e-4 );
    // TS_ASSERT_DELTA( get_sti(g), 0.335396, 1e-4 );

    // Reference StochasticDiffusionAmountCalculator with the correct namespace
    opencog::ecan::StochasticDiffusionAmountCalculator& sdac = _wagent->_sdac;
   
    sdac.update_bin(f);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    sdac.update_bin(f);
    // sdac.update_bin(i);
    // std::this_thread::sleep_for(std::chrono::seconds(1));
    // sdac.update_bin(i);
    //  sdac.update_bin(j);
    // std::this_thread::sleep_for(std::chrono::seconds(1));
    // sdac.update_bin(j);
    //  sdac.update_bin(k);
    // std::this_thread::sleep_for(std::chrono::seconds(1));
    // sdac.update_bin(k);
    // sdac.elapsed_time(f); 
    // sdac.elapsed_time(i);
    // std::this_thread::sleep_for(std::chrono::seconds(10));
    
    for (int i = 1; i < 3; ++i) {
        HandleSeq targetSet;
         _wagent->selectTargets(targetSet);

         TS_ASSERT_EQUALS(targetSet.size(), 1);
        //  Handle h = targetSet.front();
         std::cout << "selected target atom: "<< targetSet << std::endl;

        std::this_thread::sleep_for(std::chrono::seconds(i));
        std::cout << "before collect " << get_sti(f)<<std::endl;
        HandleSeq rentHandles = {f};
        _wagent->collectRent(rentHandles);
         std::cout << "after collect" << get_sti(f)<<std::endl;
        // std::this_thread::sleep_for(std::chrono::seconds(10));

    }

    std::cout << "testCollectRent passed" << std::endl;
}
    
};