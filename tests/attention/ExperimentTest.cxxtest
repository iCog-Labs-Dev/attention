#include <cxxtest/TestSuite.h>

#include <opencog/attention/AttentionModule.h>
#include <opencog/attention/AttentionParamQuery.h>
#include <opencog/attention/HebbianCreationAgent.h>
#include <opencog/attention/HebbianUpdatingAgent.h>

#include <opencog/attention/Neighbors.h>
#include <opencog/cogserver/server/CogServer.h>
#include <opencog/cogserver/modules/agents/AgentsModule.h>
#include <opencog/cogserver/modules/agents/Scheduler.h>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/attentionbank/types/atom_types.h>
#include <opencog/attentionbank/avalue/AttentionValue.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>
#include <opencog/util/algorithm.h>
#include <opencog/cogserver/server/Factory.h>

using namespace opencog;
using namespace std;

class ExperimentTest : public CxxTest::TestSuite
{
private:
    AtomSpace* as;
    AgentPtr _hebbiancreation_agentptr;
    HebbianCreationAgent* hebbianCreationAgent;
    HebbianUpdatingAgent* hebbianUpdatingAgent;
    CogServer* _cogserver;
    Scheduler* _scheduler;

public:
    void tearDown()
    {
        _cogserver->stop();
    }

    void setUp()
    {
        _cogserver = &cogserver();
        config().set("MODULES", "opencog/attention/libattention.so");
        _cogserver->loadModules();
        config().set("MODULES", "libagents.so");


        Module* amod = _cogserver->getModule("opencog::AgentsModule");
        AgentsModule* agmod = (AgentsModule*) amod;
        _scheduler = &agmod->get_scheduler();

        AttentionParamQuery _atq(&cogserver().getAtomSpace());
        _atq.load_default_values(); // Load default ECAN param values into AS


        as = &cogserver().getAtomSpace();
        hebbianCreationAgent = new HebbianCreationAgent(*_cogserver);
        hebbianUpdatingAgent = new HebbianUpdatingAgent(*_cogserver);

        // Add the HebbianUpdatingAgent to the scheduler
        Factory<HebbianCreationAgent, Agent> hebbianCreationFactory;
        _scheduler->registerAgent(HebbianCreationAgent::info().id,&hebbianCreationFactory);
        AbstractFactory<Agent>* hebbianUpdatingFactory = new Factory<HebbianUpdatingAgent, Agent>();
        _scheduler->registerAgent(HebbianUpdatingAgent::info().id, hebbianUpdatingFactory);

        std::cout << std::endl;
        std::cout << "Setup completed for HebbianUpdatingAgentUTest." << std::endl;

        std:: cout << "HebbianCreationAgent registered" << std::endl;
    }

    void testTwoAgentsTogether(void)
    {
       
        AttentionBank& ab = attentionbank(&cogserver().getAtomSpace());
        count_t conf90 = 900; 

        // Populate the AtomSpace with the example atoms
        Handle kermit = as->add_node(
            CONCEPT_NODE, "Kermit");
        kermit->setTruthValue( SimpleTruthValue::createTV(0.001, conf90));
        Handle frog = as->add_node(
            CONCEPT_NODE, "Frog");
        frog->setTruthValue( SimpleTruthValue::createTV(0.01, conf90));
        Handle animal = as->add_node(
            CONCEPT_NODE, "Animal");
        animal->setTruthValue( SimpleTruthValue::createTV(0.1, conf90));
        Handle alive = as->add_node(
            PREDICATE_NODE, "alive");
        alive->setTruthValue( SimpleTruthValue::createTV(0.01, conf90));
        Handle slimy = as->add_node(
            PREDICATE_NODE, "slimy");
        slimy->setTruthValue( SimpleTruthValue::createTV(0.01, conf90));


        Handle kermitFrog = as->add_link(
                    INHERITANCE_LINK, kermit, frog);
        kermitFrog->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle frogAnimal = as->add_link(
                    INHERITANCE_LINK, frog, animal);
        frogAnimal->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle frogAlive = as->add_link(
                    EVALUATION_LINK, frog, alive);
        frogAlive->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle frogSlimy = as->add_link(
                    EVALUATION_LINK, frog, slimy);
        frogSlimy->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));
        Handle slimyAnimal = as->add_link(
                    EVALUATION_LINK, animal, slimy);
        slimyAnimal->setTruthValue(
                    SimpleTruthValue::createTV(0.9, conf90));


        ab.stimulate(kermit, 200);
        ab.stimulate(frog, 200);
        ab.stimulate(animal, 200);
        ab.stimulate(alive, 200);
        ab.stimulate(slimyAnimal, 200);
       

        HandleSeq attentionalFocus;
        ab.get_handle_set_in_attentional_focus(back_inserter(attentionalFocus));
        // std::cout << "AF: "<< attentionalFocus << std::endl;
        TS_ASSERT_EQUALS(attentionalFocus.size() , 5);

        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();
        hebbianCreationAgent->run();

        HandleSeq hebbianLinks;
        as->get_handles_by_type(back_inserter(hebbianLinks), ASYMMETRIC_HEBBIAN_LINK);

        // std::cout << "links " << hebbianLinks << std::endl; 

        hebbianUpdatingAgent->run();
        hebbianUpdatingAgent->run();
        hebbianUpdatingAgent->run();
        hebbianUpdatingAgent->run();
        hebbianUpdatingAgent->run();
        hebbianUpdatingAgent->run();
        hebbianUpdatingAgent->run();
        hebbianUpdatingAgent->run();


        // Confirm that only n*(n-1) = 12 AsymmetricHebbianLinks were formed,
        // indicating that none incorrectly include "slimy" nor the dummy atoms
        
        // std::cout << "count(HebLinks) = " << hebbianLinks.size() << "\n";
        // std::cout << "links two " << hebbianLinks << std::endl; 
        // TS_ASSERT(hebbianLinks.size() == 20);

    }
};