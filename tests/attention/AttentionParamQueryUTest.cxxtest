#include <cxxtest/TestSuite.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/attention/AttentionParamQuery.h>

using namespace opencog;

class AttentionParamQueryUTest : public CxxTest::TestSuite
{
private:
    AtomSpace as;
    AttentionParamQuery _atq;

    std::vector<std::string> params = {"param-1", "param-2", "param-3", "param-4",
                                       "param-5", "param-6"};
    Handle h1, h2, h3, h4, hvalue;

public:
    AttentionParamQueryUTest() : _atq(&as) {
        _atq.set_param(params[0], true);
        _atq.set_param(params[1], 2.5f);
        _atq.set_param(params[2], 4.5);
        _atq.set_param(params[3], 2);
        _atq.set_param(params[5], 5);

        Handle h1 = as.add_node(TYPE_NODE, "MemberLink");
        hvalue = as.add_link(MEMBER_LINK, h1);
        _atq.set_param(params[4], hvalue);
    }

    ~AttentionParamQueryUTest() {}

    void test_get_param_value();
    void test_get_param_hvalue();
    void test_set_param();
    void test_get_params();
    void test_AF_RENT_FREQUENCY();
};

void AttentionParamQueryUTest::test_get_param_value()
{
    TS_ASSERT_EQUALS("1", _atq.get_param_value(params[0]));
    TS_ASSERT_EQUALS("2.5", _atq.get_param_value(params[1]));
    TS_ASSERT_EQUALS("4.5", _atq.get_param_value(params[2]));
    TS_ASSERT_EQUALS("2", _atq.get_param_value(params[3]));
    TS_ASSERT_EQUALS("5", _atq.get_param_value(params[5]));
}

void AttentionParamQueryUTest::test_get_param_hvalue()
{
    TS_ASSERT_EQUALS(hvalue, _atq.get_param_hvalue(params[4]));
}

void AttentionParamQueryUTest::test_set_param()
{
    _atq.set_param(params[0], false);
    TS_ASSERT_EQUALS("0", _atq.get_param_value(params[0]));
    _atq.set_param(params[1], 4);
    TS_ASSERT_EQUALS("4", _atq.get_param_value(params[1]));
}

void AttentionParamQueryUTest::test_get_params()
{
    HandleSeq hseq = _atq.get_params();
    TS_ASSERT_EQUALS(28, hseq.size()); // Ensure expected parameter count

    for (std::string pname : params) {
        Handle h = as.add_node(CONCEPT_NODE, std::move(pname));
        auto it = std::find(hseq.begin(), hseq.end(), h);
        TS_ASSERT_DIFFERS(hseq.end(), it);
    }
}

void AttentionParamQueryUTest::test_AF_RENT_FREQUENCY()
{
    // Retrieve the initial value
    std::string initialValue = _atq.get_param_value("AF_RENT_FREQUENCY");
    
    
    TS_ASSERT_EQUALS("5", initialValue);  // Assuming default is 5

    // âœ… **Use `.` instead of `->`**
    _atq.set_param("AF_RENT_FREQUENCY", 10);
    _atq.set_param("STARTING_ATOM_STI_RENT", 5.0);
    _atq.set_param("STARTING_ATOM_LTI_RENT", 7.0);
    _atq.set_param("TARGET_STI_FUNDS", 1000.0);
    _atq.set_param("STI_FUNDS_BUFFER", 500.0);
    _atq.set_param("TARGET_LTI_FUNDS", 1200.0);
    _atq.set_param("LTI_FUNDS_BUFFER", 600.0);

    // Retrieve the updated value
    std::string updatedValue = _atq.get_param_value("AF_RENT_FREQUENCY");
    std::string AFRent = _atq.get_param_value("STARTING_ATOM_STI_RENT");
    std::string stifunds = _atq.get_param_value("STI_FUNDS_BUFFER");
    
    TS_ASSERT_EQUALS("500",stifunds);
    TS_ASSERT_EQUALS("5",AFRent); // Verify update
     TS_ASSERT_EQUALS("10", updatedValue);
}
